spring.application.name=LogManager
#spring.autoconfigure.exclude=org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration

# Wal properties
wal.max-size=200000
wal.active-wal-path=src/main/resources/WAL/activeWal.log
wal.archived-wal-directory-path=src/main/resources/WAL/ArchivedWal


# ===============================================================
# DATABASE CONNECTION (PostgreSQL running in Docker)
# ===============================================================

# The JDBC URL for your PostgreSQL container
# jdbc:postgresql://<host>:<port>/<database-name>
spring.datasource.url=jdbc:postgresql://localhost:5432/log_management

# The username and password you defined in docker-compose.yml
spring.datasource.username=Akash_Sonar
spring.datasource.password=Akash@3119

# The specific driver for PostgreSQL
spring.datasource.driver-class-name=org.postgresql.Driver

# ===============================================================
# JPA & HIBERNATE CONFIGURATION
# ===============================================================

# We set this to 'validate' because we are managing the schema ourselves with our SQL script.
# 'validate' makes Hibernate check if the tables and columns match the @Entity classes on startup.
# NEVER use 'create' or 'create-drop' in a real application with persistent data.
spring.jpa.hibernate.ddl-auto=validate

# Specifies the specific SQL "language" Hibernate should use for PostgreSQL
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect


